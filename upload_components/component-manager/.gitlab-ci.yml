cache:
  paths:
    - .tox
  key: "$CI_JOB_NAME-cache-1"

stages:
  - check
  - test
  - deploy

lint:
  image: python:3.9-slim-buster
  stage: check
  tags:
    - lint
    - internet
  artifacts:
    when: on_failure
    paths:
      - flake8_output.txt
      - bandit_output.txt
    expire_in: 1 week
  before_script:
    - pip install bandit flake8
  script:
    - bandit --exclude="./tests,./integration_tests,./.tox,./.git" -r -f txt -o bandit_output.txt .
    - flake8 --config=.flake8 --output-file=flake8_output.txt --tee

.test_template:
  stage: test
  tags:
    - test
    - internet
  before_script:
    - pip install tox
  artifacts:
    reports:
      cobertura: coverage.xml

test:py2.7:
  extends: .test_template
  image: python:2.7-slim-buster
  script:
    - tox -e py27

test:py3.5:
  extends: .test_template
  # Not using `python:3.5-slim-buster` because gcc is required,
  # Wheels are not built for py3.5 anymore
  image: python:3.5-buster
  script:
    - tox -e py35

test:py3.9:
  extends: .test_template
  image: python:3.9-slim-buster
  script:
    - tox -e py39

.integration_test_template:
  stage: test
  tags:
    - test
    - internet
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - changes:
        - integration_tests/**/*
  artifacts:
    reports:
      cobertura: coverage_integration.xml
  before_script:
    - apt-get update && apt-get install -y -q libusb-1.0 cmake git ninja-build
    - git clone https://github.com/espressif/esp-idf.git
    - cd ./esp-idf/
    - ./install.sh
    - . ./export.sh
    - git submodule update --init --recursive
    - cd ..
    - pip install $CI_PROJECT_DIR pytest pytest-cov
  script:
    - py.test -s -c pytest_integration.ini --cov=. --cov-report=xml:coverage_integration.xml

integration_test:py2.7:
  extends: .integration_test_template
  image: python:2.7-slim-buster

integration_test:py3.5:
  extends: .integration_test_template
  image: python:3.5-buster

publish_on_pypi:
  image: python:3.9-slim-buster
  stage: deploy
  tags:
    - internet
  variables:
    TWINE_NON_INTERACTIVE: "true"
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: ${PYPI_TOKEN}
  before_script:
    - apt update && apt install curl jq -y
    - pip install twine
  script:
    - ./publish.sh
  only:
    refs:
      - master
